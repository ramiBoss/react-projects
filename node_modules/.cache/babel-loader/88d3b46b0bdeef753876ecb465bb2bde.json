{"ast":null,"code":"var _jsxFileName = \"/home/appiness/github/stopwatch/src/Countdown.js\";\nimport React from \"react\";\nimport \"./App.css\";\n\nclass Countdown extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.startTimer = () => {\n      this.setState({\n        timerOn: true,\n        timerTime: this.state.timerTime,\n        timerStart: this.state.timerTime\n      });\n      this.timer = setInterval(() => {\n        const newTime = this.state.timerTime - 10;\n\n        if (newTime >= 0) {\n          this.setState({\n            timerTime: newTime\n          });\n        } else {\n          clearInterval(this.timer);\n          this.setState({\n            timerOn: false\n          });\n          alert(\" Countdown ended \");\n        }\n      }, 10);\n    };\n\n    this.stopTimer = () => {\n      clearInterval(this.timer);\n      this.setState({\n        timerOn: false\n      });\n    };\n\n    this.resetTimer = () => {\n      if (this.state.timerOn === false) {\n        this.setState({\n          timerTime: this.state.timerStart\n        });\n      }\n    };\n\n    this.adjustTimer = input => {\n      const {\n        timerTime,\n        timerOn\n      } = this.state;\n      const max = 216000000;\n\n      if (!timerOn) {\n        if (input === \"incrementHours\" && timerTime + 3600000 < max) {\n          this.setState({\n            timerTime: timerTime + 3600000\n          });\n        } else if (input === \"decrementHours\" && timerTime - 3600000 > max) {\n          this.setState({\n            timerTime: timerTime - 3600000\n          });\n        } else if (input === \"incrementMinutes\" && timerTime + 60000 < max) {\n          this.setState({\n            timerTime: timerTime + 60000\n          });\n        } else if (input === \"decrementMinutes\" && timerTime - 60000 < max) {\n          this.setState({\n            timerTime: timerTime - 60000\n          });\n        } else if (input === \"incrementSeconds\" && timerTime + 1000 < max) {\n          this.setState({\n            timerTime: timerTime + 1000\n          });\n        } else if (input === \"decrementSeconds\" && timerTime - 1000 < max) {\n          this.setState({\n            timerTime: timerTime - 1000\n          });\n        }\n      }\n    };\n\n    this.state = {\n      timerOn: false,\n      timerStart: 0,\n      timerTime: 0\n    };\n  }\n\n  render() {\n    const {\n      timerTime,\n      timerStart,\n      timerOn\n    } = this.state;\n    let seconds = (\"0\" + Math.floor(timerTime / 1000) % 60).slice(-2);\n    let minutes = (\"0\" + Math.floor(timerTime / 60000) % 60).slice(-2);\n    let hours = (\"0\" + Math.floor(timerTime / 3600000)).slice(-2);\n    return React.createElement(\"div\", {\n      className: \"Countdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Countdown-timer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, hours, \" : \", minutes, \" : \", seconds), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"incrementHours\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"\\u2191\", \" \"), React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"incrementMinutes\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"\\u2191\", \" \"), React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"incrementSeconds\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"\\u2191\", \" \"), React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"decrementHours\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"\\u2193\", \" \"), React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"decrementMinutes\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"\\u2193\", \" \"), React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"decrementSeconds\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"\\u2193\", \" \")), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, timerOn === false && (timerStart === 0 || timerTime === timerStart) && React.createElement(\"button\", {\n      onClick: this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \" Start \"), timerOn === true && timerTime > 1000 && React.createElement(\"button\", {\n      onClick: this.stopTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \" Stop \"), timerOn === false && timerStart !== 0 && timerTime !== 0 && timerStart !== timerTime && React.createElement(\"button\", {\n      onClick: () => this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \" Resume \"), (timerOn === false || timerTime < 1000) && timerStart !== timerTime && timerStart > 0 && React.createElement(\"button\", {\n      onClick: this.resetTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \" Reset \")));\n  }\n\n}\n\nexport default Countdown;","map":{"version":3,"sources":["/home/appiness/github/stopwatch/src/Countdown.js"],"names":["React","Countdown","Component","constructor","props","startTimer","setState","timerOn","timerTime","state","timerStart","timer","setInterval","newTime","clearInterval","alert","stopTimer","resetTimer","adjustTimer","input","max","render","seconds","Math","floor","slice","minutes","hours"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass Countdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerOn: false,\n      timerStart: 0,\n      timerTime: 0\n    };\n  }\n\n  startTimer = () => {\n    this.setState({\n      timerOn: true,\n      timerTime: this.state.timerTime,\n      timerStart: this.state.timerTime\n    });\n    this.timer = setInterval(() => {\n      const newTime = this.state.timerTime - 10;\n      if (newTime >= 0) {\n        this.setState({ timerTime: newTime });\n      } else {\n        clearInterval(this.timer);\n        this.setState({ timerOn: false });\n        alert(\" Countdown ended \");\n      }\n    }, 10);\n  };\n\n  stopTimer = () => {\n    clearInterval(this.timer);\n    this.setState({ timerOn: false });\n  };\n\n  resetTimer = () => {\n    if (this.state.timerOn === false) {\n      this.setState({ timerTime: this.state.timerStart });\n    }\n  };\n\n  adjustTimer = input => {\n    const { timerTime, timerOn } = this.state;\n    const max = 216000000;\n    if (!timerOn) {\n      if (input === \"incrementHours\" && timerTime + 3600000 < max) {\n        this.setState({ timerTime: timerTime + 3600000 });\n      } else if (input === \"decrementHours\" && timerTime - 3600000 > max) {\n        this.setState({ timerTime: timerTime - 3600000 });\n      } else if (input === \"incrementMinutes\" && timerTime + 60000 < max) {\n        this.setState({ timerTime: timerTime + 60000 });\n      } else if (input === \"decrementMinutes\" && timerTime - 60000 < max) {\n        this.setState({ timerTime: timerTime - 60000 });\n      } else if (input === \"incrementSeconds\" && timerTime + 1000 < max) {\n        this.setState({ timerTime: timerTime + 1000 });\n      } else if (input === \"decrementSeconds\" && timerTime - 1000 < max) {\n        this.setState({ timerTime: timerTime - 1000 });\n      }\n    }\n  };\n  render() {\n    const { timerTime, timerStart, timerOn } = this.state;\n    let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\n    let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor(timerTime / 3600000)).slice(-2);\n    return (\n      <div className=\"Countdown\">\n        <div className=\"Countdown-timer\">\n          {hours} : {minutes} : {seconds}\n        </div>\n        <div className=\"\">\n          <button onClick={() => this.adjustTimer(\"incrementHours\")}>\n            &#8593;{\" \"}\n          </button>\n          <button onClick={() => this.adjustTimer(\"incrementMinutes\")}>\n            &#8593;{\" \"}\n          </button>\n          <button onClick={() => this.adjustTimer(\"incrementSeconds\")}>\n            &#8593;{\" \"}\n          </button>\n          <button onClick={() => this.adjustTimer(\"decrementHours\")}>\n            &#8595;{\" \"}\n          </button>\n          <button onClick={() => this.adjustTimer(\"decrementMinutes\")}>\n            &#8595;{\" \"}\n          </button>\n          <button onClick={() => this.adjustTimer(\"decrementSeconds\")}>\n            &#8595;{\" \"}\n          </button>\n        </div>\n        <div className=\"buttons\">\n          {timerOn === false &&\n            (timerStart === 0 || timerTime === timerStart) && (\n              <button onClick={this.startTimer}> Start </button>\n            )}\n          {timerOn === true && timerTime > 1000 && (\n            <button onClick={this.stopTimer}> Stop </button>\n          )}\n          {timerOn === false &&\n            timerStart !== 0 &&\n            timerTime !== 0 &&\n            timerStart !== timerTime && (\n              <button onClick={() => this.startTimer}> Resume </button>\n            )}\n          {(timerOn === false || timerTime < 1000) &&\n            timerStart !== timerTime &&\n            timerStart > 0 && (\n              <button onClick={this.resetTimer}> Reset </button>\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n"]},"metadata":{},"sourceType":"module"}